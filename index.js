// IMPORT LIBRARIES/DEPENDENCIES
const express = require('express'); // IMPORT THE EXPRESS FRAMEWORK
const cors = require('cors'); // IMPORT THE CORS LIBRARY ENABLING CROSS-ORIGIN RESOURCE SHARING
const dotenv = require('dotenv'); // IMPORT THE DOTENV LIBRARY TO LOAD ENVIRONMENT VARIABLES FROM THE .ENV FILE

dotenv.config(); // LOADS THE ENVIRONMENT VARIABLES FROM THE .ENV FILE

// IMPORT ROUTES
const users = require('./routes/users'); // IMPORT THE USERS ROUTER
const authentication = require('./routes/authentication'); // IMPORT THE AUTHENTICATION ROUTER

// IMPORT MIDDLEWARE
const logger = require('./middleware/logger'); // IMPORT THE LOGGER MIDDLEWARE
const authenticateToken = require('./middleware/apiRequestJWTCheck'); // IMPORT THE AUTHENTICATION MIDDLEWARE

// CREATE AN INSTANCE OF THE EXPRESS APPLICATION
// CREATES A NEW EXPRESS APP (THIS APPLICATION)
const app = express(); 

app.use(cors()); // ENABLE CROSS-ORIGIN RESOURCE SHARING FOR THIS APPLICATION // SO FRONTEND AND THIS API CAN COMMUNICATE WITH EACH OTHER
app.use(express.json()); // PARSE INCOMING REQUESTS WITH JSON PAYLOADS // ALLOWS THE API TO READ JSON DATA FROM THE REQUEST BODY

// MIDDLEWARE
app.use(logger); // LOG THE REQUEST METHOD AND URL

// DEFINE ROUTES/ API ENDPOINTS
// WHEN A REQUEST IS MADE TO THE /API/AUTHENTICATION PATH(WHICH WE DEFINE HERE)
// WHEN A REQUEST IS MADE TO THE /API/USERS PATH(WHICH WE DEFINE HERE)
// THE API WILL ROUTE THE REQUEST TO THE APPROPRIATE ROUTER AS DEFINED BELOW IN THE SECOND ARGUMENT
app.use('/api/authentication', authentication); // AUTHENTICATION ROUTES - NO TOKEN REQUIRED
app.use('/api/users', authenticateToken, users); // PROTECT ALL USER ROUTES WITH JWT AUTHENTICATION

// START THE SERVER
const PORT = process.env.PORT;

// ALLOWS THIS API APPLICATION TO LISTEN FOR INCOMING API REQUESTS ON THE SPECIFIED PORT
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
